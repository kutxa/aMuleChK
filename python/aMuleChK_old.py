#!/usr/bin/env python
# -*- coding: utf-8 -*-
######### VARIABLES DE USUARIO ###############
# path 
amulecmd='/usr/bin/amulecmd'
####### 	IMPORTACIONES ####################
import sys, os
from subprocess import Popen, PIPE
import re
from tkinter import *
import ttk
from time import sleep
############### FUNCIONES      ###############
def activo():
	comando='ps -C amuled'
	salida = os.popen(comando).read()
	salida=salida.decode()
	lista=re.split('\n',salida)[1:]
	if len(lista)==1:
		return False
	else:
		return True

def situacion():
	comando='amulecmd -c status'
	salida = os.popen(comando).read()
	salida=salida.decode()
	lista=re.split('\n > ',salida)[1:]
	lista[-1]=re.split('\n',lista[-1])[0]
	return (lista[0], lista[1],lista[2],lista[3])

###########   VENTANA DE APLICACION ##########
class Aplicacion():
	def __init__(self):
		### Funciones de la ventana principal
		def conectar(event):
			if not activo():
				comando='amuled -f'
				salida = os.popen(comando).read()
			sleep(4)
			dibujar()
		def dibujar():
			#compruebo si el amuled está activo y muestro los datos
			if activo():
				#obtengo los datos de la situación del amule y los cargo en las etiquetas
				Datos=situacion()
				#etiqueta del servidor
				serv=re.split(' ',Datos[0])[1:]
				self.txtServidor.set(serv[2].strip()+' ' + serv[5].strip())
				#etiqueta de Kademlia
				if (Datos[1])[16:18].strip()=='fi':
					self.txtKademlia.set('Red Kademlia tras cortafuegos')
				else:
					self.txtKademlia.set((Datos[1])[16:18].strip())
				#etiqueta de bajada
				self.txtBajada.set((Datos[2])[9:].strip())
				#etiqueta de subida
				self.txtSubida.set((Datos[3])[8:].strip())
				#activo el boton de ver descargas
				self.descargas['state']='normal' 
			#si no está activo doy mensaje de error, utilizo la etiqueta del servidor
			else:
				self.txtServidor.set("!aMuled NO está activo¡")
		### Dibujando la ventana principal
		self.principal=Tk()
		self.principal.geometry('400x220') # anchura x altura
		self.principal.configure(bg = 'white') #color de fondo
		self.principal.title('AmuleChK')
		self.principal.resizable(0,0) #no se puede cambiar el tamaño de la ventana
		#logotipo aMule
		logo=''''''
		logo=PhotoImage(data=logo)
		self.logo=ttk.Label(self.principal,borderwidth=0,image=logo)
		self.logo.image=logo
		self.logo.bind('<Button-1>',conectar)
		self.logo.place(x=5,y=5, height=200, width=200)
		#defino las variableS para cambiar el contenido de la etiquetas
		self.txtServidor = StringVar()
		self.txtKademlia = StringVar()
		self.txtBajada = StringVar()
		self.txtSubida = StringVar()
		#dibujo las etiquetas y las coloco en la ventana
		self.servidor=Label(self.principal,fg='Black',bg='White',textvariable=self.txtServidor)
		self.servidor.place(x=210,y=40)
		self.kad=Label(self.principal,fg='Black',bg='White',textvariable=self.txtKademlia)
		self.kad.place(x=210,y=60)
		self.bajada=Label(self.principal,fg='Black',bg='White',textvariable=self.txtBajada)
		self.bajada.place(x=210,y=80)
		self.subida=Label(self.principal,fg='Black',bg='White',textvariable=self.txtSubida)
		self.subida.place(x=210,y=100)
		#boton salir
		self.salir=ttk.Button(self.principal, text='Salir',padding=(5,5), command=quit)
		self.salir.place(x=300,y=150)
		#boton descargas actuales
		self.descargas=ttk.Button(self.principal, text='Descargas',padding=(5,5), state=DISABLED,command=self.desc_activas)
		self.descargas.place(x=200,y=150)
		
		###Obtengo los datos y muestro las etiquetas
		dibujar()
		self.principal.mainloop()
	def desc_activas(self):
		#Funciones de la ventana de descargas
		def detalle():
			comando="amulecmd -c 'show dl'"
			salida = os.popen(comando).read()
			#salida=salida.decode()
			lista=re.split('\n > ',salida)[1:]
			lista[-1]=re.split('\n',lista[-1])[0]
			texto=""
			for ind,line in enumerate(lista):
				if ind % 2 == 0:
					texto=texto + (re.split(" ",line,1)[1])[:28].strip() + "	"
				else :
					texto = texto + (re.split(" ",line,1)[1])[1:6].strip() + "	"
					if (re.split(" ",line,1)[1])[29:30].strip() == "W":
						texto= texto + "Esperando" + chr(13)
					else:
						texto= texto + "Descargando" + chr(13)
			self.activas.txtActivas.set(texto)
		### Dibujando la ventana de descargas activas
		self.activas=Toplevel()
		self.activas.geometry('400x220') # anchura x altura
		self.activas.configure(bg = 'white') #color de fondo
		self.activas.title('Descargas activas')
		self.activas.resizable(0,0) #no se puede cambiar el tamaño de la ventana
		#cuadro de texto para mostrar las descargas activas
		self.activas.txtActivas= StringVar()
		self.descargasActivas=Message(self.activas,fg='Black',bg='White', textvariable=self.activas.txtActivas,width=380)
		self.descargasActivas.place(x=20,y=20)
		#boton salir de descargas activas
		self.salirActivas=ttk.Button(self.activas, text='Salir',padding=(5,5), command=self.activas.destroy)
		self.salirActivas.place(x=300,y=150)
		#obtengo los datos y dibujo el cuadro de texto
		detalle()
##########   PRINCIPAL  ######################
def main():
	#abrir la aplicación
	aMuleChK = Aplicacion()
	return 0
if __name__ == '__main__':
	main()
